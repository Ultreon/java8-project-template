//file:noinspection GroovyUnusedCatchParameter

import java.nio.file.Files
import java.nio.file.Paths

import static java.nio.file.StandardOpenOption.*

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

// Receive properties and make variables of them.
String baseVersion = project.property("baseVersion").toString()
String versionSuffix = project.property("versionSuffix").toString()
String projectId = project.property("projectId").toString()
String projectName = project.property("projectName").toString()
String teamName = project.property("teamName").toString()

// Check project id.
if (projectId == "<<INSTERT_PROJECT_NAME>>") {
    println "Set the project name before running project."
    System.exit(0)
}

// Project build numbering
final buildNumberPath = Paths.get project.projectDir.absolutePath, "buildnumber.txt"
int buildNumber

try {
    buildNumber = Integer.valueOf new String(Files.readAllBytes(buildNumberPath))
} catch (Throwable t) {
    buildNumber = -1
}

buildNumber++
println "New buildnumber: " + buildNumber
Files.write buildNumberPath, buildNumber.toString().getBytes(), CREATE, WRITE, TRUNCATE_EXISTING

// Group and version.
String projectVersion = baseVersion + '.' + buildNumber + (versionSuffix == "none" ? "" : "-" + versionSuffix)
String projectGroup = "com.ultreon"
group projectGroup
version projectVersion

// Base name.
archivesBaseName = "$projectId"

// Compat
sourceCompatibility = targetCompatibility = 1.8

publishing {
    repositories {
        maven {
            name "MavenLocalUltreon"
            url project.property("localMaven")
        }
    }

    dependencies {

    }

    publications {
        //noinspection GroovyAssignabilityCheck
        gpr(MavenPublication) {
            //noinspection GroovyAssignabilityCheck
            from components.java
        }
    }
}

// Configure java compilation.
compileJava {
    // Compatibility.
    sourceCompatibility "1.8"
    targetCompatibility "1.8"

    // Java toolchain version.
    javaToolchains {
        version "1.8"
    }

    options.fork = true
}

// Configure how resources are being processed.
processResources {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

// Dependency repositories. For the project.
repositories {
    // Include local maven, why not?
    mavenLocal()

    // Recommended repos.
    google()
    mavenCentral()
}

// Dependency configurations.
configurations {
    api {
        canBeResolved true
    }
}

// Dependencies.
// Use api '<<project>>' for dependencies that needs to be includes in final jar.
// Use implementation '<<project>>' for dependencies that are only on compile time.
dependencies {
    // Required implementation.
    implementation 'org.jetbrains:annotations:22.0.0'

    // Other
    // {...}
}

// Jar configuration.
jar {
    // Manifest
    //noinspection GroovyAssignabilityCheck
    manifest {
        attributes([
                // Specifications
                "Specification-Title"     : projectName,
                "Specification-Vendor"    : teamName,
                "Specification-Version"   : projectVersion,

                // Implementations
                "Implementation-Title"    : projectId,
                "Implementation-Vendor"   : teamName,
                "Implementation-Version"  : projectVersion,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }

    // Collect the api dependencies, and include them in jar.
    from {
        configurations.api.collect { it.isDirectory() ? it : zipTree(it) }
    }

    // Include duplicates
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

// Log some information.
println "Project: ~"
println "  ID     : $projectId"
println "  Name   : $projectName"
println "  Group  : $projectGroup"
println "  Version: $projectVersion"
println "Compile: ~"
println "  Java: ~"
println "    Version: ${JavaVersion.current().toString()}"
println "    Source : ${compileJava.sourceCompatibility}"
println "    Target : ${compileJava.targetCompatibility}"
println "    Is Fork: ${compileJava.options.isFork()}"
println "Gradle: ~"
println "  Version: $project.gradle.gradleVersion"
